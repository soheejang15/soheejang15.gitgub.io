{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/project-remembrance-pic_co/",
    "result": {"data":{"cur":{"id":"a9265d2a-d6fa-546d-92f5-b6dbe5ecddb0","html":"<h1 id=\"1-pic_co-소개\" style=\"position:relative;\"><a href=\"#1-pic_co-%EC%86%8C%EA%B0%9C\" aria-label=\"1 pic_co 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Pic_co 소개</h1>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/7155e85b-7ed2-4a5a-83a0-339a4b577de9/image.png\" alt=\"\"></p>\n<blockquote>\n<p>비슷한 블록 사이 다른 색의 블록을 찾는 캐주얼 게임</p>\n</blockquote>\n<ul>\n<li>\n<p>사이트 링크: <a href=\"https://astonishing-mochi-c62a6b.netlify.app/\">바로가기</a></p>\n</li>\n<li>\n<p>Github Repository: <a href=\"https://github.com/soheejang15/PIC_CO\">https://github.com/soheejang15/PIC_CO</a></p>\n</li>\n<li>\n<p>개발 기간: 2022.07</p>\n</li>\n<li>\n<p>사용 기술스택: react, typescript, styled-components</p>\n</li>\n</ul>\n<h1 id=\"2-기능-룰-소개\" style=\"position:relative;\"><a href=\"#2-%EA%B8%B0%EB%8A%A5-%EB%A3%B0-%EC%86%8C%EA%B0%9C\" aria-label=\"2 기능 룰 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 기능 (룰) 소개</h1>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/6af17b6f-be2c-4a76-8d7e-4e8b2483138e/image.png\" alt=\"\"></p>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/bbafca5b-08ef-4cf4-95ef-5514ca89e5dc/image.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>각 stage는 n*n 형태로 block들이 생성되며, 그 중 한 개의 block 색만 다름</p>\n</li>\n<li>\n<p>각 stage는 15초의 시간을 가지며, 올바르지 않은 block을 클릭할 경우 3초가 줄어듦</p>\n</li>\n<li>\n<p>타이머가 0초에 도달하는 경우, 게임은 즉시 종료됨</p>\n</li>\n<li>\n<p>5 stage 마다, <code class=\"language-text\">한 줄의 블록 수 +1</code> / <code class=\"language-text\">GAP -5</code> 발생함</p>\n</li>\n<li>\n<p><code class=\"language-text\">GAP</code>은 난이도 조절을 위한 요소로, 50~5 의 범위를 가지며 <code class=\"language-text\">GAP</code>이 줄어들 수록 색이 비슷해져 난이도가 상승함</p>\n</li>\n<li>\n<p><code class=\"language-text\">GAP</code>이 5에 도달한 경우 더 이상 줄어들지 않음</p>\n</li>\n</ul>\n<h1 id=\"3-이슈-및-해결\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%EC%8A%88-%EB%B0%8F-%ED%95%B4%EA%B2%B0\" aria-label=\"3 이슈 및 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이슈 및 해결</h1>\n<h2 id=\"1-custom-hook-활용하기\" style=\"position:relative;\"><a href=\"#1-custom-hook-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"1 custom hook 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) Custom hook 활용하기</h2>\n<p>프로젝트 규모가 매우 작아 Main page을 기준으로 하위 컴포넌트 depth가 1에 가까웠기 때문에 별다른 상태관리 없이도 props drilling이 일어나지 않았으므로 자연스럽게 상태들이 Main page에 모이게 되었습니다. 상태 관리 측면에서는 문제가 없었으나, Main page에 비즈니스 로직이 모여 파일이 방대해지고, 가독성이 떨어지는 문제가 발생하였습니다.</p>\n<p>이를 해결하기 위해 useTimer와 useGameStatus, 두 가지 Custom hook을 추가하여 관심사를 분리하였습니다. useTimer를 통해 Main page는 view 렌더링에 집중하고, timer 작동 내부 로직을 알 필요없이 상황에 맞춰 타이머 시작/중지/시간 조정 메서드를 호출할 수 있게 만들었습니다. useGameStatus는 앱의 흐름을 결정하는 gameStatus 상태를 관리할 수 있고, gameStatus 변경에 따른 다음 동작은 hook 내부에서 다루지 않고 useGameStatus 호출 시 콜백함수로 넘어오도록 만들어 재사용성을 높였습니다.</p>\n<h3 id=\"추가적인-고민\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%A0%81%EC%9D%B8-%EA%B3%A0%EB%AF%BC\" aria-label=\"추가적인 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가적인 고민</h3>\n<p>이 글을 정리하면서 다른 개발자들은 비즈니스 로직을 어떻게 관리하고 있는지 궁금해져서 구글링을 해보았고 크게 3가지 분류로 나누어보자면,</p>\n<blockquote>\n<ol>\n<li>Page가 뷰와 로직을 모두 포함</li>\n</ol>\n</blockquote>\n<ul>\n<li>서비스가 클 수록 파일 규모 또한 증가</li>\n<li>관심사 분리가 되지 않아 코드 복잡도 증가</li>\n<li>컴포넌트를 더 세분화하여 방대해지는 것을 방지</li>\n</ul>\n<blockquote>\n<ol start=\"2\">\n<li>비즈니스 로직을 Custom hook으로 분리</li>\n</ol>\n</blockquote>\n<ul>\n<li>View는 렌더링에 집중</li>\n<li>Custom hook에서 비즈니스 로직을 관리하여 관심사 분리</li>\n<li>hook은 반복되는 State 관련 코드를 모듈화하여 사용하기 위함이나, 반복되지 않는 로직을 Custom hook에 담는 것은 hook의 취지에 어긋날 수 있음</li>\n</ul>\n<blockquote>\n<ol start=\"3\">\n<li>비즈니스 로직을 일반 함수(Class)로 분리</li>\n</ol>\n</blockquote>\n<ul>\n<li>Custom hook의 역할과 분리하여 비즈니스 로직을 일관적이게 관리</li>\n</ul>\n<p>각 방법마다 장단점이 다르기 때문에 팀에서 정한 코드 스타일 및 상황에 맞게 선택하면 될 것 같습니다. 이번 프로젝트에는 2번 방법을 채택하였지만 다른 프로젝트에서는 다른 방법도 적용해보면서 적당한 해결 방식을 익혀 봐야겠다고 생각했습니다.</p>\n<h2 id=\"2-usecallback과-usememo-적절하게-사용하기\" style=\"position:relative;\"><a href=\"#2-usecallback%EA%B3%BC-usememo-%EC%A0%81%EC%A0%88%ED%95%98%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 usecallback과 usememo 적절하게 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) useCallback과 useMemo 적절하게 사용하기</h2>\n<blockquote>\n<p>현진 님의 [React Rendering Optimization ] 참고(<a href=\"https://velog.io/@hyunjine/React-Rendering-Optimization\">https://velog.io/@hyunjine/React-Rendering-Optimization</a>)</p>\n</blockquote>\n<p>이전까지 Functional Component를 작성하면 내부의 함수나 값은 항상 useCallback과 useMemo를 필수적으로 사용하여 작성하는 습관이 있었습니다. React를 사용하면서 당연스럽게 여기며 깊이 생각해보지 않은 부분이었습니다. 그러나 코드리뷰를 통해 오히려 성능 저하를 가져올 수 있는 잘못된 습관임을 알게되었습니다.</p>\n<h3 id=\"usecallback\" style=\"position:relative;\"><a href=\"#usecallback\" aria-label=\"usecallback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback</h3>\n<p>동일 함수에 대해 useCallback으로 감싼 것과 감싸지 않은 렌더링 시간을 비교해보았을 때, useCallback으로 감싼 경우에 코드 실행 비용(의존성 배열 참조 동일성 체크)이 증가하게 되어 렌더링 시간이 늘어납니다. 렌더링 마다 “함수 재생성”과 “참조 동일성 비교” 소요 시간을 비교한다면 거의 차이가 없기 때문에 무엇이 빠른지 비교하는 것은 의미가 없습니다.</p>\n<p>오히려 useCallback으로 감싼 경우 초기 렌더링을 느리게하고 코드 복잡도를 증가시켜 버그의 요인이 되고, 가독성이 저하 되기 때문에 일반적인 경우에는 useCallback을 사용하는 것은 좋지 않습니다.</p>\n<h3 id=\"usememo\" style=\"position:relative;\"><a href=\"#usememo\" aria-label=\"usememo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useMemo</h3>\n<p>useMemo 또한 더욱 신중하게 사용할 필요가 있습니다. useMemo는 렌더링마다 고비용의 연산을 피하기 위해 사용하는 것으로, React에서 “고비용 연산”이란 컴포넌트의 리렌더링이 가장 일반적인 경우라고 할 수 있습니다. 따라서 컴포넌트 내부에서 이뤄지는 모든 연산에 useMemo를 적용할 필요는 없다는 것입니다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>성능 향상을 목적으로 메모이제이션 처리했던 값과 함수는 유의미하지 않은 영향 또는 오히려 앱의 성능을 저하시키는 영향을 끼칠 수 있기 때문에 주의하여 사용해야 한다는 것을 알 수 있었습니다. 적절한 사용방법을 습관화하여 성능 향상 작업을 유의미하게 만들어야겠다고 생각했습니다.</p>\n<h1 id=\"4-마무리\" style=\"position:relative;\"><a href=\"#4-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"4 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 마무리</h1>\n<p>해당 프로젝트는 현재 2년차 프론트엔드 개발자 지인에게 코드리뷰를 받아볼 수 있었고, 미처 생각하지 못했던 디테일들을 수정하면서 평소에 짜던 것보다 훨씬 정리된 코드를 짤 수 있었고, 습관이 들어 당연한 듯이 작성했던 코드들을 자세한 근거를 들어 설명해보면서 의미있는 코드가 중요하다는 것을 배웠습니다. 또한 경험이 적은 주니어 개발자인만큼 스스로 코드 짜는 것 뿐만 아니라 다른 사람들의 코드, 구현 방식 등등 많이 찾아 봐야겠다고 느꼈습니다.</p>\n<p>2022년 여름에 완성하여 손을 놓고 있다가, 2023년 1월에 PET’s PAW 프로젝트를 배포하며 배포가 별로 어려운 것이 아님을 깨닫고 배포하였습니다.</p>\n<p>평소에 CRA나 package 설치하는 시간 등등 컴퓨터를 하던 도중 잠깐의 비는시간이 나면 Pic_co 같은 캐주얼 게임을 하곤 했는데, 어렵지 않게 만들 수 있을 것 같아 도전해보았습니다. 평소에 하던 게임을 직접 만드니 꽤 즐겁게 작업할 수 있었습니다. 개발하면서 테스트도 하는 겸 잠깐씩 플레이 할 수도 있어서 좋았습니다 😼</p>\n<p>색깔 찾기 게임인 <code class=\"language-text\">Pic_co</code> 뿐만 아니라 2048, 테트리스, 사과게임 등등 다른 게임도 시간이 나면 사이드 프로젝트로 진행하면 좋겠다고 생각했습니다 😆</p>","excerpt":"1. Pic_co 소개  비슷한 블록 사이 다른 색의 블록을 찾는 캐주얼 게임 사이트 링크: 바로가기 Github Repository: https://github.com/soheejang15/PIC_CO 개발 기간: 2022.07 사용 기술스택: react, typescript, styled-components 2. 기능 (룰) 소개   각 stage는 n*n 형태로 block들이 생성되며, 그 중 한 개의 block 색만 다름 각 stage는 15초의 시간을 가지며, 올바르지 않은 block을 클릭할 경우 3초가 줄어듦 타이머가 0초에 도달하는 경우, 게임은 즉시 종료됨 5 stage 마다,  /  발생함 은 난이도 조절을 위한 요소로, 50~5 의 범위를 가지며 이 줄어들 수록 색이 비슷해져 난이도가 상승함 이 5에 도달한 경우 더 이상 줄어들지 않음 3. 이슈 및 해결 (1) Custom hook 활용하기 프로젝트 규모가 매우 작아 Main page을 기준으로 하위 컴포넌트 …","frontmatter":{"date":"January 08, 2023","title":"Pic_co 프로젝트 회고","categories":"프로젝트","author":"so_ohi","emoji":"👾"},"fields":{"slug":"/project-remembrance-pic_co/"}},"next":{"id":"fbb5929f-a4d1-5165-8cce-01d1651aaaea","html":"<h1 id=\"1-pets-paw-소개\" style=\"position:relative;\"><a href=\"#1-pets-paw-%EC%86%8C%EA%B0%9C\" aria-label=\"1 pets paw 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. PET’s PAW 소개</h1>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/7a8ffc14-e325-4eef-882d-81ea670ec24b/image.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>PET’s PAW</strong>는 농림축산식품부 유기동물 정보 오픈 API를 활용한 공고 조회 서비스입니다.</p>\n</blockquote>\n<ul>\n<li>\n<p>사이트 링크: <a href=\"https://helpful-hamster-c8a6a3.netlify.app/\">바로가기</a></p>\n</li>\n<li>\n<p>Github Repository: <a href=\"https://github.com/soheejang15/PETS-PAW\">https://github.com/soheejang15/PETS-PAW</a></p>\n</li>\n<li>\n<p>활용 오픈 API: <a href=\"https://www.data.go.kr/data/15098931/openapi.do\">https://www.data.go.kr/data/15098931/openapi.do</a></p>\n</li>\n<li>\n<p>개발 기간: 2022.12 ~ 2023.01</p>\n</li>\n<li>\n<p>사용 기술스택: next.js, typescript, styled-components, contextAPI, react-query</p>\n</li>\n<li>\n<p>주요 기능: 유기동물 공고 다중 필터링, 상세 정보 조회, 페이지네이션</p>\n</li>\n</ul>\n<h1 id=\"2-구현-기능\" style=\"position:relative;\"><a href=\"#2-%EA%B5%AC%ED%98%84-%EA%B8%B0%EB%8A%A5\" aria-label=\"2 구현 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 구현 기능</h1>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/3d06dacb-392e-4c26-8831-3baf47d90f87/image.png\" alt=\"\"></p>\n<h2 id=\"공고-필터링-및-페이지네이션\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B3%A0-%ED%95%84%ED%84%B0%EB%A7%81-%EB%B0%8F-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%84%A4%EC%9D%B4%EC%85%98\" aria-label=\"공고 필터링 및 페이지네이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공고 필터링 및 페이지네이션</h2>\n<ul>\n<li>\n<p>축종 및 품종, 성별, 중성화 여부, 실종일자, 실종지역(발견 예상 지역)의 조건을 선택적으로 지정하여 공고 필터링</p>\n</li>\n<li>\n<p>필터링한 공고 리스트를 페이지네이션으로 구현</p>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/97843725-7733-458c-8d44-f135f4fef09f/image.png\" alt=\"\"></p>\n<h2 id=\"공고-상세-정보-조회\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EA%B3%A0-%EC%83%81%EC%84%B8-%EC%A0%95%EB%B3%B4-%EC%A1%B0%ED%9A%8C\" aria-label=\"공고 상세 정보 조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공고 상세 정보 조회</h2>\n<ul>\n<li>선택한 공고에 대한 상세 정보를 모달 형태로 구현</li>\n</ul>\n<h1 id=\"3-이슈-및-해결\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%EC%8A%88-%EB%B0%8F-%ED%95%B4%EA%B2%B0\" aria-label=\"3 이슈 및 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이슈 및 해결</h1>\n<h2 id=\"1-cors-발생\" style=\"position:relative;\"><a href=\"#1-cors-%EB%B0%9C%EC%83%9D\" aria-label=\"1 cors 발생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) CORS 발생</h2>\n<p>기존의 서비스 구조는 React App(localhost)에서 오픈 API로 request하는 형태로, same-origin이 아니기 때문에 브라우저에서 CORS 에러 메세지가 발생하였습니다. 이를 해결하기 위해 3가지 방법을 고려하였습니다.</p>\n<h3 id=\"1-1-프록시-사이트-이용\" style=\"position:relative;\"><a href=\"#1-1-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%9D%B4%EC%9A%A9\" aria-label=\"1 1 프록시 사이트 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1-1) 프록시 사이트 이용</h3>\n<p>모든 출처를 허용하는 프록시 사이트 URL을 모든 Request URL 앞에 붙여 앱과 OPEN API 서버 사이의 중계점으로 활용하는 방법으로, <a href=\"http://cors-anywhere.herokuapp.com/corsdemo\">http://cors-anywhere.herokuapp.com/corsdemo</a> 등이 있습니다.</p>\n<p>실제로 배포 직전까지 해당 방법을 사용하였으나, 현재 모든 프록시 사이트는 악용 사례로 인해 API 요청 횟수 및 시간 제한을 두고 있기 때문에 개발 당시에는 큰 문제가 없으나 배포 이후에는 적절한 해결 방법이 아닌 것으로 판단되어 다른 해결 방안을 선택하였습니다.</p>\n<h3 id=\"1-2-직접-서버를-띄워-cors-헤더-세팅\" style=\"position:relative;\"><a href=\"#1-2-%EC%A7%81%EC%A0%91-%EC%84%9C%EB%B2%84%EB%A5%BC-%EB%9D%84%EC%9B%8C-cors-%ED%97%A4%EB%8D%94-%EC%84%B8%ED%8C%85\" aria-label=\"1 2 직접 서버를 띄워 cors 헤더 세팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1-2) 직접 서버를 띄워 CORS 헤더 세팅</h3>\n<p>CORS 에러 발생 시 가장 정석적인 방안이 될 수 있으나, 해당 프로젝트는 서버 개발 없이 프론트엔드 앱을 개발하려는 목표가 있었기 때문에 추가적인 공수를 들여 새로운 서버를 개발하고, 프론트엔드 앱과 별개로 서버를 배포해야 한다는 번거로움이 있었기 때문에 선택하지 않았습니다.</p>\n<h3 id=\"1-3-react-app을-next-app으로-마이그레이션-️\" style=\"position:relative;\"><a href=\"#1-3-react-app%EC%9D%84-next-app%EC%9C%BC%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EF%B8%8F\" aria-label=\"1 3 react app을 next app으로 마이그레이션 ️ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1-3) React App을 Next App으로 마이그레이션 ⭐️</h3>\n<p>마지막으로 고려한 방법은 Next App으로 마이그레이션 하여 Next 서버를 Proxy 서버로 활용하는 방법입니다. Next는 결국 React 프레임워크이기 때문에 기존 코드 일부분에 대한 수정을 거치면 어렵지 않게 마이그레이션이 가능하다고 판단했으며, 서버를 따로 배포할 것 없이 Next App만 배포한다면 CORS 에러 해결 가능하기 때문에 가장 적절한 방법이라고 생각되어 해당 방법을 선택하였습니다.</p>\n<h2 id=\"2-nextjs-전환-이후-styled-components-미작동\" style=\"position:relative;\"><a href=\"#2-nextjs-%EC%A0%84%ED%99%98-%EC%9D%B4%ED%9B%84-styled-components-%EB%AF%B8%EC%9E%91%EB%8F%99\" aria-label=\"2 nextjs 전환 이후 styled components 미작동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) Next.js 전환 이후 styled-components 미작동</h2>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/1f63669b-88f3-4164-89e9-38ca548142a9/image.png\" alt=\"\"></p>\n<p>Next App으로 마이그레이션을 하고난 뒤부터 styled-components를 통해 적용한 style이 적용되지 않고, 콘솔에 <code class=\"language-text\">Prop 'className' did not match.</code> 에러가 발생하였습니다. Next의 경우 SSR 방식이기 때문에 서버에서 Pre-rendering 된 react 트리와, 브라우저에서 처음 렌더링되는 트리에 차이가 있어 해당 에러가 발생하였습니다.</p>\n<p>해당 프로젝트는 Next.js 13버전이므로, swc를 사용하여 컴파일하기 때문에 next.config.js 에서 <code class=\"language-text\">styledComponents</code> 설정을 수정하여 해당 에러를 수정할 수 있었습니다.</p>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/b7166b2d-5a96-4f4d-9363-ea06bc10ef89/image.png\" alt=\"\"></p>\n<h1 id=\"4-마무리\" style=\"position:relative;\"><a href=\"#4-%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"4 마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 마무리</h1>\n<h2 id=\"개인-프로젝트-첫-배포\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%B2%AB-%EB%B0%B0%ED%8F%AC\" aria-label=\"개인 프로젝트 첫 배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개인 프로젝트 첫 배포!</h2>\n<p>팀 프로젝트 이외에 개인 프로젝트를 배포한 것은 처음이라 많은 어려움이 있을 줄 알았는데, 최근에는 무료로 손쉽게 배포가 가능하도록 제공되고 있는 서비스가 많았고, Netlify를 활용하여 금방 배포에 성공할 수 있었습니다. 지금까지 ‘배포’ 자체에 두려움이 많아서 프로젝트를 진행하다가 출시할 서비스가 아니니 완성 후엔 외면했던 프로젝트들이 여럿 있었던 것 같습니다.</p>\n<p>하지만 목표대로 완성하고 배포까지 하고나니, 내 프로젝트가 세상에 공개되었다는 생각에 더 개선하고 싶은 욕심이 들어 2차 개발을 염두에 두고 있습니다. 개발 당시에는 보지 못했던 아쉬운 점들이 구석구석 눈에 띄기도 하고, 사용자 입장에서 추가되면 더 유용할 것 같은 기능들도 개발하여 배포하고자 합니다. ‘사용자 입장’ 에서 더 자세히 들여다 볼 수 있게 준비가 된 것 같아 한 발자국 더 나가는 기분에 큰 성취감을 받았습니다 😊</p>\n<h2 id=\"안타까운-공고-내용들\" style=\"position:relative;\"><a href=\"#%EC%95%88%ED%83%80%EA%B9%8C%EC%9A%B4-%EA%B3%B5%EA%B3%A0-%EB%82%B4%EC%9A%A9%EB%93%A4\" aria-label=\"안타까운 공고 내용들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>안타까운 공고 내용들</h2>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/3958e7fc-8032-4400-b382-99f0732f0473/image.png\" alt=\"\"></p>\n<p><img src=\"https://velog.velcdn.com/images/sohi_5/post/9f1488d1-9903-4070-8177-bd4065181902/image.png\" alt=\"\"></p>\n<p>개발을 진행하며 수많은 유기동물 공고들을 들여다 보게되었고, 여러 동물들의 사진과 보호소 직원분들의 정성을 보며 안타까운 감정을 느꼈습니다. 공고에는 예쁜 장식을 달고 사진에 귀여운 하트, 별을 달아 어떻게든 입양될 수 있게 최선을 다해 사진을 찍고, 특이사항에는 순한 공주님, 멋진 왕자님 등등 멘트를 적어놓았습니다. 슬픈 눈으로 카메라를 바라보는 사진부터 사고를 당해 의식불명인 동물들까지 하루에도 수백 건씩 올라오는 것이 마음 아팠습니다.</p>\n<p>집으로 돌아가는 길을 잃은 동물들이 다시 주인에 품에 안기고, 외롭게 밖을 떠돌아 다니던 동물들도 하루 빨리 새로운 가족을 만나 보호기간이 지나 허무하게 목숨을 잃지 않았으면 좋겠습니다🙏</p>","frontmatter":{"date":"January 08, 2023","title":"PET's PAW 프로젝트 회고","categories":"프로젝트","author":"so_ohi","emoji":"🐾"},"fields":{"slug":"/project-remembrance-pets_paw/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://soheejang15.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/project-remembrance-pic_co/","nextSlug":"/project-remembrance-pets_paw/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}